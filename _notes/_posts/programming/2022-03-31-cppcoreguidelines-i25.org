#+BEGIN_EXPORT html
---
layout: post
title: CppCoreGuidelines I.25 用空抽象类作为类层级的接口
categories: [technology]
tags: [CppCoreGuidelines]
---
#+END_EXPORT

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

理由：

抽象类是空的，没有非静态成员数据。比有状态的基类更稳定。

反例：

含有数据的类，只知道 ~Shape~ 会出现在某个地方：

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
class Shape {  // bad: interface class loaded with data
public:
    Point center() const { return c; }
    virtual void draw() const;
    virtual void rotate(int);
    // ...
private:
    Point c;
    vector<Point> outline;
    Color col;
};
#+end_src

这会要求所有继承的类去计算 ~center~ 。可能 ~center~ 从来不会用到。同样的，
不是所有形状 ~Shape~ 都有颜色 ~Color~ ，比如那些以点组成的形状。

用抽象类会更好：

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
class Shape {    // better: Shape is a pure interface
public:
    virtual Point center() const = 0;   // pure virtual functions
    virtual void draw() const = 0;
    virtual void rotate(int) = 0;
    // ...
    // ... no data members ...
    // ...
    virtual ~Shape() = default;
};
#+end_src

强化：
- （简单）如果一个叫 C 的类，它的指针或引用赋值给 C 的基类指针或引用，
  而基类又有成员数据。警告。
