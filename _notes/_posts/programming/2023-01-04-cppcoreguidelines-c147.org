#+layout: post
#+title: CppCoreGuidelines C.147 用 dynamic_cast 转换引用的时候，如果无法转换，就会认为出错了，抛出异常
#+categories: programming
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]


C.147: Use ~dynamic_cast~ to a reference type when failure to find the
required class is considered an error


*理由*

把一个对象转换成引用，表明你希望最终得到一个有效的对象，所以类型转换必
须成功。如果失败， ~dynamic_cast~ 就应该抛出一个异常。


*例子*

#+NAME: classes
#+begin_src C++ :exports both :flags -std=c++20 :namespaces std :includes  <iostream> <vector> <algorithm> :eval no-export
class Base {
  public:
    virtual string to_string() {
        return "Derived";
    }
};

class Derived : public Base {
  public:
    string to_string() {
        return "Derived";
    }
};

std::string f(Base& b)
{
    return dynamic_cast<Derived&>(b).to_string();
}
#+end_src

以下代码，在 ~f~ 函数中， ~d~ 被成功转换成了 ~Derived~ 本身，所以正确执行。

#+begin_src C++ :noweb yes :exports both :flags -std=c++20 :namespaces std :includes  <iostream> <vector> <algorithm> :eval no-export
$$classes$$
int main()
{
    Derived d;
    cout << f(d);
}
#+end_src

#+RESULTS:
: Derived

以下代码，因为无法将 ~Base~ 转换成 ~Derived~ ，所以抛出异常 ~std::bad_cast~

#+begin_src C++ :noweb yes :exports both :flags -std=c++20 :namespaces std :includes  <iostream> <vector> <algorithm> :eval no-export
$$classes$$
int main()
{
    Base b;
    cout << f(b);
}
#+end_src

#+RESULTS:
#+begin_example
terminate called after throwing an instance of 'std::bad_cast'
#+end_example
