#+layout: post
#+title: CppCoreGuidelines CP.21 用 std::lock() 或 std::scoped_lock 获取多个互斥锁
#+categories: technology
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

"Use std::lock() or std::scoped_lock to acquire multiple mutexes"

理由

#+begin_comment
To avoid deadlocks on multiple mutexes.
#+end_comment

例子

以下例子会导致死锁：

#+begin_comment
This is asking for deadlock:
#+end_comment

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
// thread 1
lock_guard<mutex> lck1(m1);
lock_guard<mutex> lck2(m2);

// thread 2
lock_guard<mutex> lck2(m2);
lock_guard<mutex> lck1(m1);
#+end_src

#+begin_comment
Instead, use lock():
#+end_comment

应该使用 ~lock()~:

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
// thread 1
lock(m1, m2);
lock_guard<mutex> lck1(m1, adopt_lock);
lock_guard<mutex> lck2(m2, adopt_lock);

// thread 2
lock(m2, m1);
lock_guard<mutex> lck2(m2, adopt_lock);
lock_guard<mutex> lck1(m1, adopt_lock);
#+end_src

或者用 C++17 的机制：
#+begin_comment
or (better, but C++17 only):
#+end_comment

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
// thread 1
scoped_lock<mutex, mutex> lck1(m1, m2);

// thread 2
scoped_lock<mutex, mutex> lck2(m2, m1);
#+end_src

这里，开发 ~thread1~ 和 ~thread2~ 的人仍然没有协调互斥锁的顺序，但是顺序已
经不重要。

#+begin_comment
Here, the writers of thread1 and thread2 are still not agreeing on the order of the mutexes, but order no longer matters.
#+end_comment

注意

在实际代码中，互斥锁的名字不一定能告诉程序员它的使用目的，以及获取顺序。
在实际代码中，互斥锁并不总是在连续的几行代码中获取。

#+begin_comment
In real code, mutexes are rarely named to conveniently remind the
programmer of an intended relation and intended order of
acquisition. In real code, mutexes are not always conveniently
acquired on consecutive lines.
#+end_comment

在 C++17 中，可以简单的这样写：

#+begin_comment
In C++17 it’s possible to write plain
#+end_comment

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
lock_guard lck1(m1, adopt_lock);
#+end_src

然后，就能推导出互斥锁的类型。

#+begin_comment
and have the mutex type deduced.
#+end_comment

强化

检测出捕获多个互斥锁的地方。尽管不太好判断，但是捕捉前面介绍的简单例子
相对还方便。

#+begin_comment
Detect the acquisition of multiple mutexes. This is undecidable in
general, but catching common simple examples (like the one above) is
easy.
#+end_comment
