#+layout: post
#+title: CppCoreGuidelines CP.41 减少线程的创建和销毁
#+categories: technology
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

"Minimize thread creation and destruction"

理由

线程创建成本高。

#+begin_comment
Thread creation is expensive.
#+end_comment

例子

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
void worker(Message m)
{
    // process
}

void dispatcher(istream& is)
{
    for (Message m; is >> m; )
        run_list.push_back(new thread(worker, m));
}
#+end_src

这段代码给每一个消息生成一个线程。任务完成后， ~run_list~ 会销毁线程。

其实我们可以用让一组创建好的工作线程来处理消息。

#+begin_comment
This spawns a thread per message, and the run_list is presumably
managed to destroy those tasks once they are finished.

Instead, we could have a set of pre-created worker threads processing
the messages
#+end_comment

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
Sync_queue<Message> work;

void dispatcher(istream& is)
{
    for (Message m; is >> m; )
        work.put(m);
}

void worker()
{
    for (Message m; m = work.get(); ) {
        // process
    }
}

void workers()  // set up worker threads (specifically 4 worker threads)
{
    joining_thread w1 {worker};
    joining_thread w2 {worker};
    joining_thread w3 {worker};
    joining_thread w4 {worker};
}
#+end_src

注意

如果你的系统有很好的线程池，尽量用起来。如果你的系统有很好的消息队列，
尽量用起来。

#+begin_comment
If your system has a good thread pool, use it. If your system has a
good message queue, use it.
#+end_comment
