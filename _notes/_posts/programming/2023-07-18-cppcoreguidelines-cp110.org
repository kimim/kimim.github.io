#+layout: post
#+title: CppCoreGuidelines CP.110 不要自己写双次检查锁的初始化代码
#+categories: technology
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

"Do not write your own double-checked locking for initialization"

理由

从 C++11 开始，静态局部变量是以线程安全的初始化的。结合 RAII 模式，静
态局部变量可以替代你自己编写的双次检查锁的初始化代码。 ~std::call_once~
可以实现同样的目的。使用 C++11 静态局部变量或 ~std::call_once~ 编写双次
检查锁的初始化代码。


#+begin_comment
Since C++11, static local variables are now initialized in a
thread-safe way. When combined with the RAII pattern, static local
variables can replace the need for writing your own double-checked
locking for initialization. std::call_once can also achieve the same
purpose. Use either static local variables of C++11 or std::call_once
instead of writing your own double-checked locking for initialization.
#+end_comment

例子，使用 ~std::call_once~

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
void f()
{
    static std::once_flag my_once_flag;
    std::call_once(my_once_flag, []()
    {
        // do this only once
    });
    // ...
}
#+end_src


利用 C++  的线程安全的静态局部变量

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
void f()
{
    // Assuming the compiler is compliant with C++11
    static My_class my_object; // Constructor called only once
    // ...
}

class My_class
{
public:
    My_class()
    {
        // do this only once
    }
};
#+end_src

#+begin_comment
Enforcement

??? Is it possible to detect the idiom?
#+end_comment
