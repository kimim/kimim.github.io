#+layout: post
#+title: CppCoreGuidelines CP.42  在 wait 中设置判断条件
#+categories: technology
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

"Don’t wait without a condition"

理由

在 wait 中不设置判断条件的话，会发现线程醒来之后并没有任务要处理。

#+begin_comment
A wait without a condition can miss a wakeup or wake up simply to find
that there is no work to do.
#+end_comment

坏例子

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
std::condition_variable cv;
std::mutex mx;

void thread1()
{
    while (true) {
        // do some work ...
        std::unique_lock<std::mutex> lock(mx);
        cv.notify_one();    // wake other thread
    }
}

void thread2()
{
    while (true) {
        std::unique_lock<std::mutex> lock(mx);
        cv.wait(lock);    // might block forever
        // do work ...
    }
}
#+end_src

这里，如果某个其他线程用掉了 ~thread1~ 的通知， ~thread2~ 会一直等待。

#+begin_comment
Here, if some other thread consumes thread1’s notification, thread2
can wait forever.
#+end_comment

例子

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
template<typename T>
class Sync_queue {
public:
    void put(const T& val);
    void put(T&& val);
    void get(T& val);
private:
    mutex mtx;
    condition_variable cond;    // this controls access
    list<T> q;
};

template<typename T>
void Sync_queue<T>::put(const T& val)
{
    lock_guard<mutex> lck(mtx);
    q.push_back(val);
    cond.notify_one();
}

template<typename T>
void Sync_queue<T>::get(T& val)
{
    unique_lock<mutex> lck(mtx);
    cond.wait(lck, [this] { return !q.empty(); });    // prevent spurious wakeup
    val = q.front();
    q.pop_front();
}
#+end_src

现在，如果消息是空的，调用 ~get()~ 的线程会醒来，发现其他线程在它之前已
经调用了 ~geet()~ ，那么这个线程会马上睡眠，继续等待。

#+begin_comment
Now if the queue is empty when a thread executing get() wakes up
(e.g., because another thread has gotten to get() before it), it will
immediately go back to sleep, waiting.
#+end_comment

强化

标记 wait 中没设置判断条件的情况。

#+begin_comment
Flag all waits without conditions.
#+end_comment
