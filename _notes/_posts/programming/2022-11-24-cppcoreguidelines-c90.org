#+layout: post
#+title: CppCoreGuidelines C.90 用构造函数和赋值函数，不要用 memset 和 memcpy
#+categories: programming
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

C.90: Rely on constructors and assignment operators, not ~memset~ and
~memcpy~


*理由*

在标准 C++ 机制中，创建一个实例的方法是调用实例类的构造函数。参考 [[id:BEBBD42E-4E3D-4D99-A79F-82D3718AE24D][C.41]]
构造函数应该创建一个完全初始化的对象，而不需要额外的初始化工作如
~memcpy~ 等操作。一个类型还会提供拷贝构造函数和/或拷贝赋值函数，实现类型
的拷贝，从而保留类型的不变式约束。使用 ~memcpy~ 拷贝可拷贝的复杂类型会导
致未定义的行为。经常会导致类切片（slicing）和数据损坏（data
corruption）。


*例子*

#+begin_src C++ :exports both :flags -std=c++20 :namespaces std :includes  <iostream> <vector> <algorithm> :eval no-export
struct base {
    virtual void update() = 0;
    std::shared_ptr<int> sp;
};

struct derived : public base {
    void update() override {}
};
#+end_src


*例子*

#+attr_html: :class bad
#+begin_src C++ :exports both :flags -std=c++20 :namespaces std :includes  <iostream> <vector> <algorithm> :eval no-export
void init(derived& a)
{
    memset(&a, 0, sizeof(derived));
}
#+end_src

这种初始化方式会导致类型不安全，覆盖虚函数表。


*例子*

#+attr_html: :class bad
#+begin_src C++ :exports both :flags -std=c++20 :namespaces std :includes  <iostream> <vector> <algorithm> :eval no-export
void copy(derived& a, derived& b)
{
    memcpy(&a, &b, sizeof(derived));
}
#+end_src

以上操作也是会导致类型不安全，覆盖虚函数表。


*强化*
- 标记传递复杂类型给 ~memset~ 或 ~memcpy~ 的操作
