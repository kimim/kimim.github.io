#+layout: post
#+title: CppCoreGuidelines C.32 考虑类是否可以拥有其成员原始指针和引用
#+categories: programming
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

C.32: If a class has a raw pointer (~T*~) or reference (~T&~), consider
whether it might be owning


*理由*

很多代码里的所有权信息是不明确的。


*例子*

#+attr_latex: :options linenos, numbersep=5pt
#+header: :flags -std=c++20
#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+header: :exports both :eval no-export :results output
#+begin_src C++ :noweb strip-export
class legacy_class
{
    foo* m_owning;   // Bad: change to unique_ptr<T> or owner<T*>
    bar* m_observer; // OK: keep
}
#+end_src

这里， ~m_owning~ 成员变量是由 ~legacy_class~ 类所有的，所以要改成
~unique_ptr<T>~ 或 ~owner<T*>~ 。而 ~m_observer~ 则是引用了外部的变量，所以可
以保留这么写。

*注意*

在新写的代码里，明确表明哪些指针是类所有，哪些指针是类外面的变量。类不
能保有引用的所有权。

*强化*

查看原始成员指针和成员引用，是否初始化的时候分配了内存。
