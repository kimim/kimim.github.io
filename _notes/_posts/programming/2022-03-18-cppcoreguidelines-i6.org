#+layout: post
#+title: CppCoreGuidelines I.6 用 Expects() 表达前置条件
#+categories: programming
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

I.6: Prefer Expects() for expressing preconditions

*理由*

可以明确前置条件，可以通过某些外部工具进行检查确保。


*例子*

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
int area(int height, int width)
{
    Expects(height > 0 && width > 0);            // good
    // ...
}
#+end_src

#+attr_html: :class bad
#+header: :flags -std=c++20
#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+header: :exports both :eval no-export :results output
#+begin_src C++ :noweb strip-export
int area(int height, int width)
{
    if (height <= 0 || width <= 0) my_error();   // obscure
    // ...
}
#+end_src


*注意*

前置条件可以通过多种方式声明：注释、 ~if~ 条件语句、 ~assert()~ 断言。然而，
这些方式要么很难和普通代码区分开，要么很难更新，要么很难让工具处理，而
且可能语义上是错的。（你希望在 debug 模式下总是中断程序进行检查？然后
在实际生产环境不做检查？）


*注意*

前置条件应该是接口的一部分，而不是实现的一部分。但是 C++ 语言目前还不
支持。一旦[[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0380r1.pdf][语言支持]]，核心指南会引入标准的前置条件、后置条件与断言判断。


*注意*

~Expects()~ 也可以在算法过程中，检查条件是否满足。


*注意*

不建议用无符号型数据来确保传入的数据非负。


*强化*
- 目前语言层面还不支持，请检查 ~assert()~ 判断是否合理。
