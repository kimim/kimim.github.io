#+layout: post
#+title: CppCoreGuidelines CP.44  给 lock_guard, unique_lock 声明变量
#+categories: technology
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

"Remember to name your ~lock_guard~ s and ~unique_lock~ s"

理由

#+begin_comment
An unnamed local object is a temporary that immediately goes out of
scope.
#+end_comment

例子

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
// global mutexes
mutex m1;
mutex m2;

void f()
{
    unique_lock<mutex>(m1); // (A)
    lock_guard<mutex> {m2}; // (B)
    // do work in critical section ...
}
#+end_src

看起来很正常。但是是不对的。在 (A) 处， ~m1~ 是默认构造的局部
~unique_lock~ ，它会遮盖掉全局的 ~::m1~ 这样也就不会锁住 ~::m1~ 。在 (B) 处，
构造了一个匿名的临时 ~lock_guard~ 并且锁住 ~::m2~ ，但是立即走出了作用域范
围，马上释放了 ~::m2~ 。对于 ~f()~ 函数的其他部分来说，并没有锁住任何互斥
锁。

#+begin_comment
This looks innocent enough, but it isn’t. At (A), m1 is a
default-constructed local unique_lock, which shadows the global ::m1
(and does not lock it). At (B) an unnamed temporary lock_guard is
constructed and locks ::m2, but immediately goes out of scope and
unlocks ::m2 again. For the rest of the function f() neither mutex is
locked.
#+end_comment

强化

标记所有匿名的 ~lock_guard~ 和 ~unique_lock~
