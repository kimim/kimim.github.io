#+BEGIN_EXPORT html
---
layout: post
title: CppCoreGuidelines I.23 函数参数数量不要太多
categories: [technology]
tags: [CppCoreGuidelines]
---
#+END_EXPORT

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

理由：

参数数量太多容易混乱出错。传递太多参数，也常成本很高。

讨论：

函数参数太多的两个最常见的理由：
- 缺少抽象。因为缺少抽象，本该组合的对象被分散单个传递。不仅参数数量大，
  也容易出错，因为没有一个不变框架约束参数数值。
- 违背了“一个函数一个职责”。函数的工作超越了其本该做的单个任务。

例子：

标准库函数 ~merge()~ 是我们能舒服处理的极限：

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
template<class InputIterator1, class InputIterator2, class OutputIterator, class Compare>
OutputIterator merge(InputIterator1 first1, InputIterator1 last1,
                     InputIterator2 first2, InputIterator2 last2,
                     OutputIterator result, Compare comp);
#+end_src

因为“缺少抽象”，本该是传进一个范围（抽象），STL却传进了迭代器对（未封装的组件值）。

这里，我们有4个模板参数，6个函数参数。如果我们默认比较器参数为 “<”，则
可以改写成下面代码：

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
template<class InputIterator1, class InputIterator2, class OutputIterator>
OutputIterator merge(InputIterator1 first1, InputIterator1 last1,
                     InputIterator2 first2, InputIterator2 last2,
                     OutputIterator result);
#+end_src

降低了一些表面的复杂度，但是没有降低整体复杂度。要真正减少参数数量，我
们需要把参数捆绑到更高层的抽象：

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
template<class InputRange1, class InputRange2, class OutputIterator>
OutputIterator merge(InputRange1 r1, InputRange2 r2, OutputIterator result);
#+end_src

把参数分组打包是一种常用的减少参数数量的技术。并且还可以提升检查的可能性。

另外，我们也可以用 ISO TS 定义的概念，指定必须有三个类型用于合并：

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
Mergeable{In1, In2, Out}
OutputIterator merge(In1 r1, In2 r2, Out result);
#+end_src

例子：

安全配置建议

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
void f(int* some_ints, int some_ints_length);  // BAD: C style, unsafe
#+end_src

改为

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
void f(gsl::span<int> some_ints);              // GOOD: safe, bounds-checked
#+end_src

此处使用抽象，更安全，更可靠，同时减少了参数数量。

注意：

多少参数算太多？尽量少于4个参数。有的函数可以用四个参数很好的表达，但是不多。

替代方案：用更好的抽象。把参数分组到有意义的对象，（以值或引用）传递对象。

替代方案：用默认参数或重载。这样常用的调用要少一些参数。

强化：
- 函数声明了两个一样类型的迭代器或指针，而没用 ~range~ 或 ~view~ ，警告。
