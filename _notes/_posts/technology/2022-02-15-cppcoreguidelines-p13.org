#+BEGIN_EXPORT html
---
layout: post
title: CppCoreGuidelines P.13 选用适当的库
categories: [technology]
tags: [CppCoreGuidelines]
---
#+END_EXPORT

- [[http://kimi.im/2021-12-18-cppcoreguidelines-p1][P.1 直接地用代码表达编程设计理念]]
- [[http://kimi.im/2021-12-20-cppcoreguidelines-p2][P.2 用 ISO C++ 标准写代码]]
- [[http://kimi.im/2021-12-20-cppcoreguidelines-p3][P.3 明确地表达程序意图]]
- [[http://kimi.im/2021-12-21-cppcoreguidelines-p4][P.4 理想情况下，程序应该要静态类型安全]]
- [[http://kimi.im/2021-12-22-cppcoreguidelines-p5][P.5 编译时检查比运行时检查好]]
- [[http://kimi.im/2021-12-23-cppcoreguidelines-p6][P.6 不能在编译时检查的，要能在在运行时检查]]
- [[http://kimi.im/2021-12-23-cppcoreguidelines-p7][P.7 尽早捕获运行时错误]]
- [[http://kimi.im/2021-12-29-cppcoreguidelines-p8][P.8 不要泄漏任何资源]]
- [[http://kimi.im/2021-12-30-cppcoreguidelines-p9][P.9 不要浪费计算时间和计算空间]]
- [[http://kimi.im/2021-12-30-cppcoreguidelines-p10][P.10 能用不可变数据就不用可变数据]]
- [[http://kimi.im/2022-01-04-cppcoreguidelines-p11][P.11 通过封装整理混乱代码]]
- [[http://kimi.im/2022-02-14-cppcoreguidelines-p12][P.12 选用适当的工具]]

设计精良、文档丰富、支持给力的程序库，可以节省大量的时间和精力。代码质
量和文档一般来说会比自己开发更好。因为多个用户共享成果，分摊的时间、精
力和金钱也会花费更少。广泛使用的程序库，维护的更好，也能更快适配新的系
统，节省移植成本。

#+begin_src C++ :results output :exports both :flags -std=c++17 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
vector v = {4, 3, 6, 1, 9};
std::sort(begin(v), end(v), std::greater<>());
std::for_each(begin(v), end(v), [](auto x){std::cout<< x << " ";});
#+end_src

#+RESULTS:
: 9 6 4 3 1

通常标准库提供的排序算法执行效率比较高。除非有特殊原因，你需要自己实现
排序等标准库中的算法。

尽量使用：
- ISO C++ 标准库
- Guidelines Support Library (GSL)
