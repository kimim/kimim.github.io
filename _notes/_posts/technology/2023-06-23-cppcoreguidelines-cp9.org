#+layout: post
#+title: CppCoreGuidelines CP.9 尽量用工具验证并行计算代码
#+categories: technology
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

"Whenever feasible use tools to validate your concurrent code"

经验表明，把并行计算代码设计正确非常困难。而且编译时检查、运行时检查以
及测试都很难有效的发现并行计算中的错误。一些细微的并行错误会导致很严重
的后果，包括内存错乱、死锁以及安全漏洞。

#+begin_comment
Experience shows that concurrent code is exceptionally hard to get right and that compile-time checking, run-time checks, and testing are less effective at finding concurrency errors than they are at finding errors in sequential code. Subtle concurrency errors can have dramatically bad effects, including memory corruption, deadlocks, and security vulnerabilities.
#+end_comment

注意

做到线程安全是非常有难度的。经常需要非常有经验的程序员：一个重要的策略
是利用工具规避这些风险。有很多商业的与开源的、研究性的与生产性的工具可
以利用。但是人们的需求和限制条件千差万别，所以我们也无法提供放之四海而
皆准的建议。不过可以提一些：
- 静态强化工具： clang 和老版本的 GCC 提供一些静态标注关键字去标注线程
  安全属性。准确的使用这些技术可以把很多类线程安全问题转换成编译时错误。
  这些标注一般都是局部的，比如用特定互斥锁保护某个特定成员变量。这种方
  法也很容易习得。然而，与其他很多静态工具一样，也经常会出现误报的情况，
  也有应该要报警却没有发现的情况。
- 动态强化工具：clang thread sanitizer （即 TSAN ）是一个强大的动态工
  具：它能修改编译过程，添加内从访问检查语句，执行你的程序，识别出可能
  存在的数据竞争情况。其代价有两方面，一方面内存会增加 5-10 倍，另一方
  面， CPU 运行速度会慢 2-20 倍。这类动态工具最好应用于集成测试、
  canary push 或有多个线程的单元测试。如果 TSAN 发现问题，就是实际存在
  的数据竞争情况，但是也仅仅是在当前执行过程中出现的情况。

#+begin_comment
Thread safety is challenging, often getting the better of experienced programmers: tooling is an important strategy to mitigate those risks. There are many tools “out there”, both commercial and open-source tools, both research and production tools. Unfortunately people’s needs and constraints differ so dramatically that we cannot make specific recommendations, but we can mention:

    Static enforcement tools: both clang and some older versions of GCC have some support for static annotation of thread safety properties. Consistent use of this technique turns many classes of thread-safety errors into compile-time errors. The annotations are generally local (marking a particular member variable as guarded by a particular mutex), and are usually easy to learn. However, as with many static tools, it can often present false negatives; cases that should have been caught but were allowed.

    dynamic enforcement tools: Clang’s Thread Sanitizer (aka TSAN) is a powerful example of dynamic tools: it changes the build and execution of your program to add bookkeeping on memory access, absolutely identifying data races in a given execution of your binary. The cost for this is both memory (5-10x in most cases) and CPU slowdown (2-20x). Dynamic tools like this are best when applied to integration tests, canary pushes, or unit tests that operate on multiple threads. Workload matters: When TSAN identifies a problem, it is effectively always an actual data race, but it can only identify races seen in a given execution.
#+end_comment


强化

根据实际应用开发者的需求，选择最有价值的支持工具。

#+begin_comment
It is up to an application builder to choose which support tools are valuable for a particular application.
#+end_comment
