#+layout: post
#+title: CppCoreGuidelines C.100 除非你确定需要，尽量不要用无锁编程
#+categories: technology
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

"Don't use lock-free programming unless you absolutely have to"

理由

容易出错，且对语言、机器架构、数据结构等知识的要求很高。

#+begin_comment
It’s error-prone and requires expert level knowledge of language features, machine architecture, and data structures. 
#+end_comment

坏例子

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
extern atomic<Link*> head;        // the shared head of a linked list

Link* nh = new Link(data, nullptr);    // make a link ready for insertion
Link* h = head.load();                 // read the shared head of the list

do {
    if (h->data <= data) break;        // if so, insert elsewhere
    nh->next = h;                      // next element is the previous head
} while (!head.compare_exchange_weak(h, nh));    // write nh to head or to h
#+end_src


很难通过测试发现其中的 bug 。这里有所谓的 ABA 问题。比如，在 ~nh->next
= h~ 之后，线程被切换走，其他线程可能做了类似的操作， ~nnh->next = h~ 然
后， ~h~ 和 ~nnh~ 进行交换。新的 ~h~ 成了 ~nnh~ 。这时候，线程又切换回来， ~nh~
和老的 ~h~ 进行交换，这时候， ~h~ 指向的链表就丢失了。

#+begin_comment
Spot the bug. It would be really hard to find through testing. Read up on the ABA problem.
#+end_comment


例外

只要你使用顺序的内存模型（ ~memory_order_seq_cst~ ），你就可以简单安全地
使用原子变量。

#+begin_comment

Atomic variables can be used simply and safely, as long as
you are using the sequentially consistent memory model
(memory_order_seq_cst), which is the default.
#+end_comment

注意

高层的并行机制，如线程和互斥锁是用无锁编程实现的。

#+begin_comment
Higher-level concurrency mechanisms, such as threads and mutexes are implemented using lock-free programming.
#+end_comment

其他选项

使用别人实现的无锁数据结构。

#+begin_comment
Use lock-free data structures implemented by others as part of some library.
#+end_comment
