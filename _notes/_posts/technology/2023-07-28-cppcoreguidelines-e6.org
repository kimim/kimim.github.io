#+layout: post
#+title: CppCoreGuidelines E.6 用 RAII 避免内存泄漏
#+categories: technology
#+tags: CppCoreGuidelines

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

"Use RAII to prevent leaks"

理由

内存泄漏肯定不行。手工管理释放内存资源很容易出错。RAII（Resource
Acquisition Is Initialization） 是避免内存泄漏的最简单、最系统化的方式。

#+begin_comment
Leaks are typically unacceptable. Manual resource release is
error-prone. RAII (“Resource Acquisition Is Initialization”) is the
simplest, most systematic way of preventing leaks.
#+end_comment

例子


#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
void f1(int i)   // Bad: possible leak
{
    int* p = new int[12];
    // ...
    if (i < 17) throw Bad{"in f()", i};
    // ...
}
#+end_src

我们可以在抛出异常之前小心地释放内存资源。

#+begin_comment
We could carefully release the resource before the throw:
#+end_comment

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
void f2(int i)   // Clumsy and error-prone: explicit release
{
    int* p = new int[12];
    // ...
    if (i < 17) {
        delete[] p;
        throw Bad{"in f()", i};
    }
    // ...
}
#+end_src

但是，这样操作很繁琐。代码量大的时候，在多处可能跑出异常的地方显式地释
放资源，既重复是劳动，又容易出错。

#+begin_comment
This is verbose. In larger code with multiple possible throws explicit
releases become repetitive and error-prone.
#+end_comment

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
void f3(int i)   // OK: resource management done by a handle (but see below)
{
    auto p = make_unique<int[]>(12);
    // ...
    if (i < 17) throw Bad{"in f()", i};
    // ...
}
#+end_src

注意

这个方法在隐式地抛出异常的情况下也能正常工作，因为清理工作在被调用函数
中处理掉了。

#+begin_comment
Note that this works even when the throw is implicit because it
happened in a called function:
#+end_comment

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
void f4(int i)   // OK: resource management done by a handle (but see below)
{
    auto p = make_unique<int[]>(12);
    // ...
    helper(i);   // might throw
    // ...
}
#+end_src

除非你需要指针语义，不然的话，就用局部的资源对象：

#+begin_comment
Unless you really need pointer semantics, use a local resource object:
#+end_comment

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
void f5(int i)   // OK: resource management done by local object
{
    vector<int> v(12);
    // ...
    helper(i);   // might throw
    // ...
}
#+end_src

这样更简单、更安全、更高效率。

#+begin_comment
That’s even simpler and safer, and often more efficient.
#+end_comment

注意

如果没有明显的资源句柄，或者很难定义合适的 RAII 对象/句柄，最后的办法
是通过某个 ~final_action~ 对象清理内存资源。

#+begin_comment
If there is no obvious resource handle and for some reason defining a proper RAII object/handle is infeasible, as a last resort, cleanup actions can be represented by a final_action object.
#+end_comment

注意

如果我们写的程序不能执行异常怎么办？首先，我们要去质疑一下，为什么？是
不是有一些反异常操作的迷信？我们只知道很少一些情况不能用异常：
- 我们的系统很小，支持异常操作会吃掉 2K 内存的大部分。
- 我们使用硬实时系统，没有工具可以确保在规定的时间内处理异常。
- 我们的系统里有大量旧代码，用了大量难以理解的指针，所以异常会导致内存泄漏。
- 我们用的 C++ 版本中的异常处理机制性能很糟糕（慢、耗内存、没法和动态链接库兼容）。请像提供商提议，如果没有用户提议，不会有改进发生。
- 如果我们质疑经理的古老智慧，我们会被炒鱿鱼。

#+begin_comment
But what do we do if we are writing a program where exceptions cannot be used? First challenge that assumption; there are many anti-exceptions myths around.

We know of only a few good reasons:
- We are on a system so small that the exception support would eat up most of our 2K memory.
- We are in a hard-real-time system and we don’t have tools that guarantee us that an exception is handled within the required time.
- We are in a system with tons of legacy code using lots of pointers in difficult-to-understand ways (in particular without a recognizable ownership strategy) so that exceptions could cause leaks.
- Our implementation of the C++ exception mechanisms is unreasonably poor (slow, memory consuming, failing to work correctly for dynamically linked libraries, etc.). Complain to your implementation purveyor; if no user complains, no improvement will happen.
- We get fired if we challenge our manager’s ancient wisdom.
#+end_comment

这些理由中，只有第一条是很根本的，所以，只要有可能，尽量通过 RAII 使用
异常机制，或者设计你的 RAII 对象，确保永远不会出错。如果没法使用异常机
制，就模拟出 RAII 操作。就是在对象创建之后，先检查对象是否有效，然后在
析构函数中释放所有资源。其中一个策略是给每一个资源句柄添加一个 ~valid()~
操作。

#+begin_comment
Only the first of these reasons is fundamental, so whenever
possible, use exceptions to implement RAII, or design your RAII
objects to never fail. When exceptions cannot be used, simulate
RAII. That is, systematically check that objects are valid after
construction and still release all resources in the destructor. One
strategy is to add a valid() operation to every resource handle:
#+end_comment

#+header: :namespaces std :includes  <iostream> <vector> <algorithm>
#+begin_src C++ :exports both :flags -std=c++20  :eval no-export :results output
void f()
{
    vector<string> vs(100);   // not std::vector: valid() added
    if (!vs.valid()) {
        // handle error or exit
    }

    ifstream fs("foo");   // not std::ifstream: valid() added
    if (!fs.valid()) {
        // handle error or exit
    }

    // ...
} // destructors clean up as usual
#+end_src

很明显，这样会增加代码长度，不支持隐式的异常传导，并且也很容易忘记添加
~valid()~ 检查。所以，还是首选使用异常机制。

请查看：使用 noexcept 规则

#+begin_comment
Obviously, this increases the size of the code, doesn’t allow for implicit propagation of “exceptions” (valid() checks), and valid() checks can be forgotten. Prefer to use exceptions.

See also: Use of noexcept
#+end_comment

