 #+BEGIN_EXPORT html
---
layout: post
title: CppCoreGuidelines I.12 用 not_null 声明不能为 null 的指针
categories: [technology]
tags: [CppCoreGuidelines]
---
#+END_EXPORT

[[http://kimi.im/tags.html#CppCoreGuidelines-ref][C++ 核心指南目录]]

理由：
- 避免对空指针取值操作错误。
- 避免对空指针的多余检查，提升性能。

例如：

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
int length(const char* p);            // 不清楚 length(nullptr) 是否正确

length(nullptr);                      // OK?

int length(not_null<const char*> p);  // 更好：可以认为 p 非空
int length(const char* p);            // p 可以是空指针
#+end_src

在代码中表明代码意图，可以让实现的人和工具提供更好的诊断信息。比如通过
静态检测发现某些错误。可以提升性能，比如去除空指针判断分支。


注意：

GSL 定义了 ~not_null~

注意：

~const char*~ 这种指向 ~char~ 的指针用来表示 C 风格的 ~\0~ 结束的字符串，不
太直接，容易误解和出错。建议使用 ~czstring~ 。

#+begin_src C++ :results output :exports both :flags -std=c++20 :namespaces std :includes <iostream> <vector> <algorithm> :eval no-export
// we can assume that p cannot be nullptr
// we can assume that p points to a zero-terminated array of characters
int length(not_null<zstring> p);
#+end_src

注意：

这里 ~length()~ 实际代码中应该用 ~std::strlen()~

强化：
- （简单，基础）如果函数在各种分支检查参数指针是否为空指针。这种情况，
  还是把参数声明为 ~not_null~ 比较好。
- （复杂）如果函数在各个返回路径都要确保返回的不是空指针，这时，可以把
  返回类型声明为 ~not_null~
